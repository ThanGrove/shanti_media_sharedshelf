<?php
/**
 * @file
 * Media: SharedShelf provides a stream wrapper and formatters for images
 * provided by SharedShelf, available at http://catalog.sharedshelf.artstor.org/
 *
 * @TODO use hook_entity_info_alter to add SharedShelf specific view mode?
 */

// A registry of variable_get defaults.
include_once 'includes/media_sharedshelf.variables.inc';

// Hooks and callbacks for integrating with File Entity module for display.
include_once 'includes/media_sharedshelf.formatters.inc';

/**
 * Implements hook_help().
 */
function media_sharedshelf_help($path, $arg) {
  switch ($path) {
    case 'admin/help#media_sharedshelf':
      return '<p>' . t("Provides access to ARTStor SharedShelf content from within the Media module.") . '<p>';
  }
}

/**
 * Implements hook_permission().
 */
function media_sharedshelf_permission() {
  return array(
    'configure Media SharedShelf' => array(
      'title' => t('Configure Media SharedShelf settings'),
      'description' => t('Set user account credentials. Configure default project and image size settings.'),
      'restrict access' => TRUE,
    ),
    'add Media SharedShelf' => array(
      'title' => t('Add Media SharedShelf settings'),
      'description' => t('Add SharedShelf images via the media browser'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function media_sharedshelf_menu() {
  $items = array();
  // Add a menu item to the media admin configuration for SharedShelf API
  // authentication info.
  $items['admin/config/media/media_sharedshelf/api'] = array(
    'title' => 'SharedShelf API settings',
    'description' => 'Configure required API settings for Media: SharedShelf.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_sharedshelf_api_form'),
    'access arguments' => array('configure Media SharedShelf'),
    'file' => 'includes/media_sharedshelf.admin.inc',
  );
  // Add a menu item to the media admin configuration for default settings to
  // use with this plugin.
  $items['admin/config/media/media_sharedshelf/settings'] = array(
    'title' => 'SharedShelf media settings',
    'description' => 'Configure optional settings for Media: SharedShelf.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_sharedshelf_settings_form'),
    'access arguments' => array('configure Media SharedShelf'),
    'file' => 'includes/media_sharedshelf.admin.inc',
  );
  // Add a menu item to the media content section for adding SharedShelf images
  // as media objects.
  $items['media/add/media_sharedshelf'] = array(
    'title' => 'Add media from SharedShelf',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_sharedshelf_add'),
    'access arguments' => array('add Media SharedShelf'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/media_sharedshelf.admin.inc',
    'weight' => -1,
  );

  $items['admin/content/media/add/media_sharedshelf'] = $items['media/add/media_sharedshelf'];
  return $items;
}

/**
 * Create stream wrapper for SharedShelf videos.
 */
function media_sharedshelf_stream_wrappers() {
  return array(
    'sharedshelf' => array(
      'name' => t('SharedShelf media'),
      'class' => 'MediaSharedShelfStreamWrapper',
      'description' => t('Media available from SharedShelf.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function media_sharedshelf_theme($existing, $type, $theme, $path) {
  return array(
    'media_sharedshelf_preview_style' => array(
      'variables' => array(
        'field_type' => NULL,
        'container_name' => NULL,
        'style_name' => NULL,
      ),
      'file' => 'media_sharedshelf.theme.inc',
      'path' => $path . '/themes',
    ),
    'media_sharedshelf_field_formatter_styles' => array(
      'variables' => array('element' => NULL, 'style' => NULL),
      'file' => 'media_sharedshelf.theme.inc',
      'path' => $path . '/themes',
    ),
    'media_sharedshelf_embed' => array(
      'variables' => array(
        'style_name' => NULL,
        'uri' => NULL,
        'alt' => NULL,
        'title' => NULL,
      ),
      'file' => 'media_sharedshelf.theme.inc',
      'path' => $path . '/themes',
    ),
    'media_sharedshelf_styles' => array(
      'variables' => array('element' => NULL, 'style' => NULL),
      'file' => 'media_sharedshelf.theme.inc',
      'path' => $path . '/themes',
    ),
  );
}

/**
 * Implements hook_file_styles_filter().
 */
function media_sharedshelf_file_styles_filter($object) {
  $file = isset($object->file) ? $object->file : $object;
  if ((file_uri_scheme($file->uri) == 'sharedshelf') && (strpos($file->filemime, 'image') !== FALSE)) {
    return 'media_sharedshelf';
  }
  elseif ((file_uri_scheme($file->uri) == 'sharedshelf') && (strpos($file->filemime, 'video') !== FALSE)) {
    return 'media_sharedshelf';
  }
}

/**
 * Implements hook_form_alter(). 
 */
function media_sharedshelf_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'media_sharedshelf_api_form') {
    $form['#validate'][] = 'media_sharedshelf_api_form_connect_to_server';
  }
	// Disable the Shared Shelf ID field populated by shared shelf on file importation
	if ($form_id == 'file_entity_edit') {
		$form['field_sharedshelf_ssid']['#disabled'] = TRUE;
		$form['field_sharedshelf_ssid']['#suffix'] = '<div class="form-item form-type-textfield form-item-field-sharedshelf-ssid-und-0-value form-disabled">
  				<label for="edit-field-sharedshelf-ssid-und-0-value">File URI </label>
 					<input class="text-full form-text" disabled="disabled" type="text" value="' . $form['#entity']->uri .'" size="60" maxlength="255">
 					<div class="description">URI for image on this site</div></div>';
		drupal_add_css('#edit-field-sharedshelf-ssid {float: left; padding-right: 25px;}', array('group' => CSS_THEME, 'type' => 'inline'));
	}
}
/**
 * Determine if a stream belongs to Media: SharedShelf.
 */
function media_sharedshelf_formatter_filter($variables) {
  if (isset($variables['object'])) {
    $object = $variables['object'];
    return (file_uri_scheme($object->uri) == 'sharedshelf');
  }
}

/**
 * Based on the internal URI, this will return the full size image URL.
 *
 * @param string $url
 *   The module's internal uri format for a SharedShelf image depending on how
 *   it was added.
 * @param int $width
 *   Width used to guess the actual size provided by SharedShelf.
 * @param int $height
 *   We use this to guess the actual size provided by SharedShelf.
 * @param bool $refresh
 *   Optional; if TRUE, then we'll force a new load of the XML. Otherwise,
 *   a cached version will be retrieved if possible.
 */
function media_sharedshelf_image_url($url, $width = 0, $height = 0, $refresh = FALSE) {
  module_load_include('inc', 'media_sharedshelf', 'includes/media_sharedshelf.utilities');
  return _media_sharedshelf_image_url($url, $width, $height, $refresh);
}

/**
 * Return the representation image's mimetype and bytestream.
 *
 * @param int $asset_id
 *   The asset id number for the SharedShelf image to be retrieved.
 * @param int $size
 *   The size indicator for the appropriate image representation wanted.
 *
 * @return array
 *   An associative array containing:
 *   'mimetype' - the mimetype for the image representation.
 *   'bytestream' - the bytes for the image representation.
 */
function media_sharedshelf_image_representation($asset_id, $size = 0) {
  module_load_include('inc', 'media_sharedshelf', 'includes/media_sharedshelf.utilities');
  return _media_sharedshelf_api_representation_size_get($asset_id, $size);
}

/**
 * Gets the image mimetype.
 *
 * @param string $url
 *   The internal schema url for the SharedShelf image.
 *
 * @return string
 *   The URL to the image located on the SharedShelf server.
 */
function media_sharedshelf_image_mimetype($url) {
  module_load_include('inc', 'media_sharedshelf', 'includes/media_sharedshelf.utilities');
  return _media_sharedshelf_get_image_mimetype($url);
}

/**
 * Implements hook_media_parse().
 */
function media_sharedshelf_media_parse($url) {
  module_load_include('inc', 'media_sharedshelf', 'includes/media_sharedshelf.utilities');
  return _media_sharedshelf_media_parse($url);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_sharedshelf_ctools_plugin_api($owner, $api) {
  if ($owner == 'file_entity' && $api == 'file_type') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_file_type().
 */
function media_sharedshelf_file_type($file) {
  // Shared Shelf allows for TIFF images which seem to be treated as undefined
  // by the Media module so we need to override this.
  if (strstr($file->filemime, 'image')) {
    return array('image');
  }
  // Shared Shelf will support audio and video so put this in here now.
  elseif (strstr($file->filemime, 'video')) {
    return array('video');
  }
  elseif (strstr($file->filemime, 'audio')) {
    return array('audio');
  }
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function media_sharedshelf_file_mimetype_mapping_alter(&$mapping) {
  // Since Shared Shelf full size images may be TIFF format make sure this is
  // recognized by Drupal.
  $new_mapping['tif'] = 'image/tiff';
  foreach ($new_mapping as $extension => $mime_type) {
    if (!in_array($mime_type, $mapping['mimetypes'])) {
      $mapping['mimetypes'][] = $mime_type;
    }
    $index = array_search($mime_type, $mapping['mimetypes']);
    $mapping['extensions'][$extension] = $index;
  }
}

/**
 * Implements hook_file_default_types_alter().
 */
function media_sharedshelf_file_default_types_alter(&$types) {
  // Since Shared Shelf full size images may be TIFF format make sure this is
  // recognized by Drupal.
  $types['image']->mimetypes[] = 'image/tiff';
}

/**
 * Implements hook_views_api().
 */
function media_sharedshelf_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'media_sharedshelf'),
  );
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 */
function media_sharedshelf_apachesolr_index_document_build_file(ApacheSolrDocument $document, $file, $env_id) {
  module_load_include('inc', 'media_sharedshelf', 'includes/media_sharedshelf.utilities');
  // Use an entity wrapper to retrieve the fields for this file.
  $file_type = media_sharedshelf_file_type($file);
  $info_bundle = array('bundle' => $file_type[0]);
  $wrapper = entity_metadata_wrapper('file', $file, $info_bundle);
  // Loop through the basic fields to get data values to add to the document.
  // The content field in the Solr document is used for handling any text you
  // want to to be searchable for the entity.
  foreach (media_sharedshelf_basic_fields() as $info) {
    if (!is_array($wrapper->{$info['field_name']}->value())) {
      $value = strval($wrapper->{$info['field_name']}->value());
    }
    else {
      $value = implode('; ', $wrapper->{$info['field_name']}->value());
    }
    if ($value != '') {
      $document->content .= $info['settings']['label'] . ': ' . $value . '<br />';
    }
  }
}

/**
 * SharedShelf search tab for the Media browser.
 */

/**
 * Implements hook_media_browser_plugin_info().
 */
function media_sharedshelf_media_browser_plugin_info() {
  $info['sharedshelf'] = array(
    'title' => t('SharedShelf'),
    'class' => 'MediaSharedShelfBrowser',
  );

  return $info;
}

/**
 * Provides WYSIWYG plugin form for adding media items from SharedShelf search.
 */
function media_sharedshelf_wysiwyg_add($form, &$form_state = array()) {
  module_load_include('inc', 'media', 'includes/media.browser');
  module_load_include('inc', 'media_sharedshelf', 'includes/media_sharedshelf.utilities');

  // Our search criteria can come from the form, or from the pager.
  $project = isset($form_state['values']['project']) ? $form_state['values']['project'] : (isset($_GET['project']) ? $_GET['project'] : '0');
  $keyword = isset($form_state['values']['keyword']) ? $form_state['values']['keyword'] : (isset($_GET['keyword']) ? $_GET['keyword'] : '');

  // Retrieve the a list of projects from SharedShelf to use.
  $projects = _media_sharedshelf_get_projects();
  $default_project = !empty($project) ? $project : media_sharedshelf_variable_get('default_project');
  $form['project'] = array(
    '#type' => 'select',
    '#title' => t('Project'),
    '#description' => t('Choose a project to search.'),
    '#options' => (array('0' => '') + $projects),
    '#default_value' => $default_project,
  );
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyword'),
    '#description' => t('Input a phrase or keyword to find.'),
    '#default_value' => $keyword,
  );
  $form['search_ss'] = array(
    '#type' => 'button',
    '#value' => t('Search SharedShelf'),
  );

  // This is a simple pager.
  $page_ss = isset($_GET['page-ss']) ? $_GET['page-ss'] : 0;
  if (isset($form_state['values']['keyword'])) {
    // Reset the pager when we press search.
    $page_ss = 0;
  }
  if (!empty($keyword) and (($project != '0') or ($project != ''))) {
    $limit = 12;
    $start = $page_ss * $limit;
    $search = _media_sharedshelf_api_project_assets_get($project, $start, $limit, TRUE, $keyword);
  }
  $form['images']['#prefix'] = '<div id="container"><div id="scrollbox"><ul id="media-browser-library-list" class="media-list-thumbnails">';
  $form['images']['#suffix'] = '</ul><div id="status"></div></div></div>';

  $empty = FALSE;
  $files = array();
  if (!isset($search['assets'])) {
    $empty = TRUE;
  }
  else {
    foreach ($search['assets'] as $image) {
      $asset = _media_sharedshelf_api_assets_representation_details_get($image['id']);
      if ($asset['success']) {
        $uri = _media_sharedshelf_build_uri(array('a' => $image['id']));
      }
      else {
        // Ignore missing images.
        continue;
      }
      // Create a temporary file object for our retrieved image.
      $file = file_uri_to_object($uri);
      $file->filename = $image['filename'];
      $file->type = 'image';
      if (!isset($file->fid)) {
        $file->fid = 0;
      }
      media_browser_build_media_item($file);
      $file->preview = l($file->preview, 'media/browser', array(
        'html' => TRUE,
        'attributes' => array(
          'data-uri' => $uri,
        ),
        'query' => array('render' => 'media-popup', 'uri' => $uri),
      ));
      $form['images'][$uri] = array(
        '#markup' => $file->preview,
        '#prefix' => '<li>',
        '#suffix' => '</li>',
      );
      $files[$uri] = $file;
    }
  }

  if (!count($files)) {
    $empty = TRUE;
  }
  if ($empty) {
    $form['empty'] = array(
      '#markup' => '<div class="empty-message">' . t('No images match your search criteria. Please try again.') . '</div>',
    );
  }

  $query = $_GET;
  if ($keyword !== '') {
    $query['keyword'] = $keyword;
  }
  if ($project !== '') {
    $query['project'] = $project;
  }

  $dest = $query['q'];
  unset($query['q']);
  $prev = $next = '';
  if ($page_ss) {
    $query['page-ss'] = $page_ss - 1;
    $prev = l(t('previous'), $dest, array('query' => $query));
    $prev = l(t('previous'), $dest, array('query' => $query, 'fragment' => 'media-tab-sharedshelf'));
  }
  $query['page-ss'] = $page_ss + 1;
  if (!$empty) {
    $next = l(t('next'), $dest, array('query' => $query));
    $next = l(t('next'), $dest, array('query' => $query, 'fragment' => 'media-tab-sharedshelf'));
  }

  $form['pager'] = array(
    '#markup' => $prev . ' ' . $next,
  );

  $form['submitted-image'] = array(
    '#type' => 'hidden',
    '#default_value' => FALSE,
  );

  // Add the files to JS so that they are accessible inside the browser.
  drupal_add_js(array('media' => array('files' => $files)), 'setting');

  // Add media browser javascript and CSS.
  drupal_add_js(drupal_get_path('module', 'media_sharedshelf') . '/javascript/media-sharedshelf.browser.js');

  $form['actions'] = array('#type' => 'actions');
  // NOTE: All other tabs in the WYSIWYG embed feature use Submit as the label
  // of the button. So that is used here for consistency, even though the better
  // term to use might be Select or Embed.
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    // @ignore style_button_submit
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Allow stream wrappers to have their chance at validation.
 *
 * @see media_parse_to_uri()
 */
function media_sharedshelf_wysiwyg_add_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Search SharedShelf')) {
    return;
  }
  $uri = $form_state['values']['submitted-image'];
  try {
    $file = file_uri_to_object($uri, TRUE);
  }
  catch (Exception $e) {
    form_set_error('url', $e->getMessage());
    return;
  }

  if (!$file->uri) {
    form_set_error('url', t('Please select an image.'));
    return;
  }
}

/**
 * Save the image added via WYSIWYG and allow editing before embedding.
 */
function media_sharedshelf_wysiwyg_add_submit($form, &$form_state) {
  module_load_include('inc', 'media_sharedshelf', 'includes/media_sharedshelf.utilities');
  $uri = $form_state['values']['submitted-image'];
  try {
    // Save the remote file.
    $file = file_uri_to_object($uri, TRUE);
    file_save($file);
    _media_sharedshelf_add_metadata($file);
  }
  catch (Exception $e) {
    form_set_error('url', $e->getMessage());
    return;
  }

  if (!$file->fid) {
    form_set_error('url', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $uri)));
    return;
  }
  else {
    $form_state['file'] = $file;
  }

  // Redirect to the file edit page after submission.
  if (file_entity_access('update', $file)) {
    $destination = array('destination' => 'admin/content/file');
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}
